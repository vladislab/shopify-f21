{"version":3,"sources":["utils/omdb.js","components/MovieDetail.js","components/MovieItem.js","components/MovieList.js","components/NominateItem.js","components/NominationList.js","utils/localStorage.js","utils/processResponses.js","components/Homepage.js","App.js","reportWebVitals.js","index.js"],"names":["PATH","process","getMoviesByTitle","title","page","query","trim","replace","path","axios","get","then","res","data","catch","e","console","log","response","GetMovieDetail","id","MovieDetail","props","useState","movie","update","loading","setLoading","useEffect","a","Response","open","fetchData","Dialog","onClose","handleClose","fullScreen","mobile","className","AppBar","color","Toolbar","IconButton","edge","onClick","Close","DialogTitle","Typography","Title","active","spinner","Poster","src","alt","Image","Plot","imdbRating","Paper","Year","Rated","Released","Genre","Director","Actors","Country","Awards","Button","href","imdbID","target","nominated","variant","denominate","nominate","MovieItem","dialog","toggle","handleToggle","other","TableRow","hover","TableCell","disabled","nominatable","AddCircleOutline","fontSize","MovieList","tableHeader","Search","totalResult","elevation","totalNomination","Sms","Beenhere","Table","TableHead","map","header","TableBody","results","TableFooter","TablePagination","rowsPerPageOptions","colSpan","count","rowsPerPage","onChangePage","newPage","handleChangePage","NominateItem","ListItem","ListItemIcon","DragHandle","ListItemText","RemoveCircleOutline","NominationList","React","isSaved","setIsSaved","list","LocalActivity","length","List","dragHandleSelector","lockAxis","onDrop","Inbox","Divider","clear","startIcon","Delete","size","save","Save","saveState","key","state","serializedState","JSON","stringify","window","localStorage","setItem","processResponses","n_list","newRes","isNominated","some","m","Homepage","searchField","error","updateError","result","updateResult","updateTotalResult","parse","getItem","loadState","nominatedList","updateNomination","changePage","handleSearch","newSearch","movies","totalResults","Error","reprocess","newList","newResult","handleDenominate","filter","handleNomSave","handleNomClear","removedIndex","addedIndex","items","arrayMove","isMobile","useMediaQuery","nightMode","switchMode","position","BeachAccess","Switch","defaultChecked","onChange","NightsStay","MovieFilter","TextField","label","placeholder","value","fullWidth","onKeyDown","processNomination","theme","createMuiTheme","typography","fontFamily","join","App","setNightMode","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.718423ab.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\nconst PATH = `https://www.omdbapi.com/?apikey=${API_KEY}`;\r\n\r\nexport function getMoviesByTitle(title, page) {\r\n  const query = title.trim().replace(' ', '+');\r\n\r\n  let path = PATH + `&s=${query}&type=movie&page=${page}`;\r\n  let response = undefined;\r\n  response = axios\r\n    .get(path)\r\n    .then((res) => res.data)\r\n    .then((data) => data)\r\n    .catch((e) => {\r\n      console.log(e.response);\r\n      return e.response.data;\r\n    });\r\n  return response;\r\n}\r\n\r\nexport function GetMovieDetail(id) {\r\n  const query = id;\r\n\r\n  let path = PATH + `&i=${query}`;\r\n  let response = undefined;\r\n  response = axios\r\n    .get(path)\r\n    .then((res) => res.data)\r\n    .then((data) => data)\r\n    .catch((e) => {\r\n      console.log(e.response);\r\n      return e.response.data;\r\n    });\r\n  return response;\r\n}\r\n","import {\r\n  AppBar,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  IconButton,\r\n  Paper,\r\n  Toolbar,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { useEffect, useState, Fragment } from 'react';\r\nimport { GetMovieDetail } from '../utils/omdb';\r\nimport '../styles/MovieDetail.css';\r\nimport { Close, Image } from '@material-ui/icons';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nexport default function MovieDetail(props) {\r\n  const [movie, update] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      setLoading(true);\r\n      const res = await GetMovieDetail(props.id);\r\n      if (res.Response === 'True') {\r\n        update(res);\r\n      }\r\n      setLoading(false);\r\n    }\r\n    if (props.open) fetchData();\r\n  }, [props.open, props.id]);\r\n\r\n  const getLink = () => {\r\n    const link = `https://www.imdb.com/title/${movie.imdbID}/`;\r\n    return link;\r\n  };\r\n  return (\r\n    <Dialog\r\n      onClose={props.handleClose}\r\n      open={props.open}\r\n      fullScreen={props.mobile}\r\n      className=\"dialog-container\"\r\n    >\r\n      {props.mobile && (\r\n        <AppBar color=\"inherit\" className=\"dialog-bar\">\r\n          <Toolbar>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              onClick={props.handleClose}\r\n            >\r\n              <Close />\r\n            </IconButton>\r\n            <DialogTitle>\r\n              <Typography>{movie.Title}</Typography>\r\n            </DialogTitle>\r\n          </Toolbar>\r\n        </AppBar>\r\n      )}\r\n      <LoadingOverlay active={loading} spinner>\r\n        {!loading && (\r\n          <Fragment>\r\n            <DialogTitle>\r\n              <Typography>{movie.Title}</Typography>\r\n            </DialogTitle>\r\n            <div className=\"dialog\">\r\n              <div className=\"intro\">\r\n                {movie.Poster !== 'N/A' ? (\r\n                  <img src={movie.Poster} alt={'N/A'} />\r\n                ) : (\r\n                  <Image />\r\n                )}\r\n                {movie.Plot !== 'N/A' && (\r\n                  <Typography className=\"plot\">{movie.Plot}</Typography>\r\n                )}\r\n                <Typography className=\"rating\">\r\n                  IMDB Rating: {movie.imdbRating}\r\n                </Typography>\r\n              </div>\r\n              <Typography>Additional Information</Typography>\r\n              <Paper className=\"details\">\r\n                <Typography>Year: {movie.Year}</Typography>\r\n                <Typography>Rated: {movie.Rated}</Typography>\r\n                <Typography>Released: {movie.Released}</Typography>\r\n                <Typography>Genre: {movie.Genre}</Typography>\r\n                <Typography>Director: {movie.Director}</Typography>\r\n                <Typography>Actors: {movie.Actors}</Typography>\r\n                <Typography>Country: {movie.Country}</Typography>\r\n                <Typography>Awards: {movie.Awards}</Typography>\r\n              </Paper>\r\n              <div className=\"detail-buttons\">\r\n                <Button href={getLink()} color=\"primary\" target=\"_blank\">\r\n                  go to IMDb\r\n                </Button>\r\n                {props.nominated ? (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => {\r\n                      props.denominate(props.movie);\r\n                      props.handleClose();\r\n                    }}\r\n                  >\r\n                    Remove nomination\r\n                  </Button>\r\n                ) : (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => {\r\n                      props.nominate(props.movie);\r\n                      props.handleClose();\r\n                    }}\r\n                  >\r\n                    Nominate\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </Fragment>\r\n        )}\r\n      </LoadingOverlay>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { TableCell, TableRow, IconButton } from \"@material-ui/core\";\r\nimport { AddCircleOutline } from \"@material-ui/icons\";\r\nimport MovieDetail from \"./MovieDetail\";\r\nimport { Image } from \"@material-ui/icons\";\r\n\r\nimport \"../styles/MovieItem.css\";\r\n\r\nexport default function MovieItem(props) {\r\n  const [dialog, toggle] = useState(false);\r\n\r\n  const handleToggle = () => {\r\n    toggle(!dialog);\r\n  };\r\n  const { nominate, ...other } = props;\r\n  return (\r\n    <TableRow hover className=\"row\">\r\n      {!props.mobile && (\r\n        <TableCell onClick={handleToggle} className=\"movie-cell\">\r\n          {props.Poster !== \"N/A\" ? (\r\n            <img\r\n              src={props.Poster}\r\n              alt={\"N/A\"}\r\n              onClick={handleToggle}\r\n              className=\"img\"\r\n            />\r\n          ) : (\r\n            <div>\r\n              <Image />\r\n            </div>\r\n          )}\r\n        </TableCell>\r\n      )}\r\n      <TableCell className=\"movie-title\" onClick={handleToggle}>\r\n        {props.Title}\r\n      </TableCell>\r\n      <TableCell onClick={handleToggle}>{props.Year}</TableCell>\r\n      <TableCell>\r\n        <IconButton\r\n          onClick={() => props.nominate(other)}\r\n          disabled={props.nominated || !props.nominatable}\r\n          className=\"add\"\r\n        >\r\n          <AddCircleOutline fontSize=\"medium\" />\r\n        </IconButton>\r\n      </TableCell>\r\n      <MovieDetail\r\n        open={dialog}\r\n        handleClose={handleToggle}\r\n        id={props.imdbID}\r\n        mobile={props.mobile}\r\n        movie={other}\r\n        nominate={props.nominate}\r\n        nominated={props.nominated || !props.nominatable}\r\n      />\r\n    </TableRow>\r\n  );\r\n}\r\n","import React, { Fragment } from \"react\";\nimport {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Toolbar,\n  TableFooter,\n  TablePagination,\n} from \"@material-ui/core\";\nimport { Sms, Beenhere, Search } from \"@material-ui/icons\";\nimport MovieItem from \"./MovieItem\";\nimport \"../styles/MovieList.css\";\nimport LoadingOverlay from \"react-loading-overlay\";\n\nexport default function MovieList(props) {\n  const tableHeader = props.mobile\n    ? [\"Title\", \"Year of Release\", \"Nominate\"]\n    : [\"Poster\", \"Title\", \"Year of Release\", \"Nominate\"];\n  return (\n    <div className={`movie_container${!props.mobile ? \"-desktop\" : \"\"}`}>\n      <h5 className=\"movie_container-title\">\n        {<Search className=\"search-icon\" />} Your search result:{\" \"}\n        {props.totalResult} item(s)\n      </h5>\n      <Paper className=\"paper\" elevation={4}>\n        {!!props.totalNomination && (\n          <Toolbar>\n            {props.totalNomination < 5 ? (\n              <Fragment>\n                <Sms className=\"sms-icon\" color=\"inherit\" />\n                <h6 className=\"banner\">\n                  {`You have selected ${props.totalNomination} movie(s) for\n                  nominations.`}\n                </h6>\n              </Fragment>\n            ) : (\n              <Fragment>\n                <Beenhere className=\"sms-icon banner-completed\" />\n                <h5 className=\"banner-completed\">\n                  Your nomination list is ready!\n                </h5>\n              </Fragment>\n            )}\n          </Toolbar>\n        )}\n\n        <LoadingOverlay active={props.loading} spinner>\n          <Table>\n            <TableHead>\n              <TableRow>\n                {tableHeader.map((header) => (\n                  <TableCell>{header}</TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {props.results &&\n                props.results.map((movie) => (\n                  <MovieItem\n                    {...movie}\n                    nominate={props.nominate}\n                    nominatable={props.totalNomination <= 4}\n                    mobile={props.mobile}\n                  />\n                ))}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TablePagination\n                  rowsPerPageOptions={[10]}\n                  colSpan={3}\n                  count={+props.totalResult}\n                  rowsPerPage={props.rowsPerPage}\n                  page={props.page}\n                  onChangePage={(e, newPage) => props.handleChangePage(newPage)}\n                />\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </LoadingOverlay>\n      </Paper>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  IconButton,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemSecondaryAction,\r\n  ListItemText,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport { RemoveCircleOutline, DragHandle } from '@material-ui/icons';\r\nimport MovieDetail from './MovieDetail';\r\nimport '../styles/NominateItem.css';\r\n\r\nexport default function NominateItem(props) {\r\n  const [dialog, toggle] = useState(false);\r\n\r\n  const handleToggle = () => {\r\n    toggle(!dialog);\r\n  };\r\n  return (\r\n    <ListItem hover className=\"row\">\r\n      <ListItemIcon className=\"drag-handle\">\r\n        <DragHandle />\r\n      </ListItemIcon>\r\n      <ListItemText onClick={handleToggle}>\r\n        <Typography className=\"nom-title\">{props.Title}</Typography>\r\n        <Typography className=\"nom-year\">{props.Year}</Typography>\r\n      </ListItemText>\r\n      <ListItemIcon className=\"remove\">\r\n        <IconButton color=\"inherit\" onClick={() => props.denominate(props)}>\r\n          <RemoveCircleOutline fontSize=\"small\" />\r\n        </IconButton>\r\n      </ListItemIcon>\r\n      <MovieDetail\r\n        open={dialog}\r\n        handleClose={handleToggle}\r\n        id={props.imdbID}\r\n        mobile={props.mobile}\r\n        movie={props}\r\n        denominate={props.denominate}\r\n        nominated\r\n      />\r\n    </ListItem>\r\n  );\r\n}\r\n","import React, { useEffect } from \"react\";\nimport {\n  Button,\n  Divider,\n  List,\n  ListItem,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport NominateItem from \"./NominateItem\";\nimport \"../styles/NominationList.css\";\nimport { Delete, LocalActivity, Save, Inbox } from \"@material-ui/icons\";\nimport { Container, Draggable } from \"react-smooth-dnd\";\n\nexport default function NominationList(props) {\n  const [isSaved, setIsSaved] = React.useState(false);\n\n  useEffect(() => {\n    setIsSaved(false);\n  }, [props.list]);\n\n  return (\n    <div className={`container${!props.mobile ? \"-desktop\" : \"\"}`}>\n      <h5 className=\"container-title\">\n        {<LocalActivity className=\"icon\" />}Your nominations{\" \"}\n        {`(${props.list.length}/5)`}\n      </h5>\n      <Paper className=\"paper\" elevation={4}>\n        <List>\n          <Container\n            dragHandleSelector=\".drag-handle\"\n            lockAxis=\"y\"\n            onDrop={props.onDrop}\n          >\n            {!!props.list.length ? (\n              props.list.map((movie, id) => (\n                <Draggable key={props.id}>\n                  <NominateItem\n                    {...movie}\n                    denominate={props.denominate}\n                    mobile={props.mobile}\n                  />\n                </Draggable>\n              ))\n            ) : (\n              <ListItem>\n                <Typography className=\"empty\" fontSize=\"small\">\n                  <Inbox className=\"empty-icon\" fontSize=\"small\" />\n                  List empty\n                </Typography>\n              </ListItem>\n            )}\n          </Container>\n          <Divider />\n          <div className=\"nom_buttons\">\n            <Button\n              onClick={() => {\n                props.clear();\n              }}\n              variant=\"contained\"\n              color=\"secondary\"\n              startIcon={<Delete />}\n              size=\"small\"\n              disabled={!props.list.length}\n              className=\"discard\"\n            >\n              Discard\n            </Button>\n            <Button\n              onClick={(e) => {\n                props.save();\n                setIsSaved(true);\n              }}\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"small\"\n              startIcon={<Save />}\n              disabled={isSaved || !props.list.length}\n            >\n              {isSaved ? \"Saved\" : \"Save\"}\n            </Button>\n          </div>\n        </List>\n      </Paper>\n\n      <h6 className=\"nom_subtitle\">\n        Your list is saved in your browser's storage so you can always come back\n        later.\n      </h6>\n    </div>\n  );\n}\n","export const loadState = (key) => {\r\n  let serializedState;\r\n  try {\r\n    serializedState = JSON.parse(window.localStorage.getItem(key));\r\n  } catch (e) {\r\n    console.log(`failed to load '${key}' localStorage state`);\r\n  }\r\n  return serializedState;\r\n};\r\n\r\nexport const saveState = (key, state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    window.localStorage.setItem(key, serializedState);\r\n  } catch {\r\n    console.log('localStorage:', 'failed to save state');\r\n  }\r\n};\r\n","export function processResponses(res = [], n_list = []) {\r\n  const newRes = res.map((movie) => {\r\n    const isNominated = n_list.some((m) => movie.imdbID === m.imdbID);\r\n    if (isNominated) movie.nominated = true;\r\n    else movie.nominated = false;\r\n    return movie;\r\n  });\r\n  return newRes;\r\n}\r\n\r\nexport function processNomination(movie = {}, n_list = []) {\r\n  const isNominated = n_list.some((m) => movie.imdbID === m.imdbID);\r\n  if (isNominated) return n_list;\r\n  else return [...n_list, movie];\r\n}\r\n\r\nexport function denominate(movie = {}, n_list = []) {\r\n  const newRes = n_list.filter((m) => m.imdbID !== movie.imdbID);\r\n  return newRes;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport { useMediaQuery } from \"react-responsive\";\nimport {\n  AppBar,\n  Button,\n  Paper,\n  Switch,\n  TextField,\n  Toolbar,\n} from \"@material-ui/core\";\nimport MovieList from \"./MovieList\";\nimport NominationList from \"./NominationList\";\nimport { loadState, saveState } from \"../utils/localStorage\";\nimport { getMoviesByTitle } from \"../utils/omdb\";\nimport {\n  processResponses,\n  processNomination,\n  denominate,\n} from \"../utils/processResponses\";\nimport \"../styles/Homepage.css\";\nimport { BeachAccess, MovieFilter, NightsStay } from \"@material-ui/icons\";\nimport arrayMove from \"array-move\";\n\nexport default function Homepage(props) {\n  const [searchField, update] = useState(\"\");\n  const [error, updateError] = useState(\"\");\n\n  const [result, updateResult] = useState([]);\n  const [totalResult, updateTotalResult] = useState(0);\n  const [nominatedList, updateNomination] = useState(\n    loadState(\"nominations\") || []\n  );\n  const [page, changePage] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    saveState(\"nominations\", nominatedList);\n  }, [nominatedList]);\n\n  const handleChangePage = (newPage) => {\n    handleSearch(newPage);\n    changePage(newPage);\n  };\n\n  const handleSearch = async (newPage = page, newSearch = false) => {\n    updateError(\"\");\n    if (!searchField) return;\n    setLoading(true);\n    if (newSearch) {\n      changePage(0);\n    }\n    const res = await getMoviesByTitle(searchField, newPage + 1);\n    if (res.Response === \"True\") {\n      const movies = processResponses(res.Search, nominatedList);\n      updateResult(movies);\n      updateTotalResult(res.totalResults);\n    }\n    setLoading(false);\n    if (res.Error) {\n      updateError(res.Error);\n      updateResult([]);\n      updateTotalResult(0);\n    }\n  };\n\n  const reprocess = (newList) => {\n    const newResult = processResponses(result, newList);\n    updateResult(newResult);\n  };\n\n  const handleDenominate = (movie) => {\n    const newList = denominate(movie, nominatedList);\n    updateNomination(newList);\n    reprocess(newList);\n  };\n\n  const handleNominate = (movie) => {\n    const newList = processNomination(movie, nominatedList);\n    updateNomination(newList);\n    reprocess(newList);\n  };\n\n  const handleClear = () => {\n    update(\"\");\n    updateResult([]);\n    updateTotalResult(0);\n    changePage(0);\n    updateError(\"\");\n  };\n\n  const handleNomSave = () => {\n    saveState(\"nominations\", nominatedList);\n  };\n  const handleNomClear = () => {\n    updateNomination([]);\n    reprocess([]);\n  };\n\n  const onDrop = ({ removedIndex, addedIndex }) => {\n    updateNomination((items) => arrayMove(items, removedIndex, addedIndex));\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === \"Enter\") handleSearch(0, true);\n  };\n\n  const isMobile = useMediaQuery({ query: \"(max-width: 1000px)\" });\n  const { nightMode, switchMode } = props;\n  return (\n    <div className=\"homepage\">\n      <div>\n        <AppBar\n          position=\"static\"\n          color=\"inherit\"\n          className={`app-bar${nightMode ? \"\" : \"-sun\"}`}\n        >\n          <Toolbar className=\"toolbar\" variant=\"dense\">\n            <BeachAccess className={`${nightMode ? \"night\" : \"sun\"}`} />\n            <Switch defaultChecked color=\"default\" onChange={switchMode} />\n            <NightsStay className={`${!nightMode ? \"night\" : \"moon\"}`} />\n          </Toolbar>\n        </AppBar>\n      </div>\n      <h3 className={`headerText-${nightMode ? \"-night\" : \"\"}`}>\n        The Shoppies: Movie awards for entrepreneurs\n      </h3>\n      <h5>Find your Top 5 Movies and add them to your Nomination list.</h5>\n      {isMobile && (\n        <NominationList\n          list={nominatedList}\n          denominate={handleDenominate}\n          onDrop={onDrop}\n          clear={handleNomClear}\n          save={handleNomSave}\n          mobile\n          nightMode={nightMode}\n        />\n      )}\n      <span>\n        <h5 className=\"title\">\n          <MovieFilter className=\"movie-icon\" />\n          Find a movie\n        </h5>\n      </span>\n      <Paper className=\"search\" elevation={4}>\n        <div className=\"paper\">\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Enter a movie title\"\n            variant=\"outlined\"\n            placeholder=\"The Wolf of Wall Street\"\n            value={searchField}\n            onChange={(e) => update(e.target.value)}\n            fullWidth\n            onKeyDown={handleKeyPress}\n          />\n          <p className=\"error\">{error}</p>\n          <div className=\"buttons\">\n            <Button\n              onClick={() => {\n                handleClear();\n              }}\n              variant=\"outlined\"\n            >\n              Clear\n            </Button>\n            <Button\n              onClick={() => handleSearch(0, true)}\n              variant=\"outlined\"\n              disabled={!searchField}\n            >\n              Search\n            </Button>\n          </div>\n        </div>\n      </Paper>\n      <div className=\"list\">\n        <MovieList\n          loading={loading}\n          totalResult={totalResult}\n          results={result}\n          nominate={handleNominate}\n          totalNomination={nominatedList.length}\n          handleChangePage={handleChangePage}\n          page={page}\n          rowsPerPage={10}\n          mobile={isMobile}\n          nightMode={nightMode}\n        />\n        {!isMobile && (\n          <NominationList\n            list={nominatedList}\n            denominate={handleDenominate}\n            onDrop={onDrop}\n            clear={handleNomClear}\n            save={handleNomSave}\n            nightMode={nightMode}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","import \"./App.css\";\r\nimport Homepage from \"./components/Homepage\";\r\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { useState } from \"react\";\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    fontFamily: [\"Montserrat\", \"sans-serif\"].join(\",\"),\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  const [nightMode, setNightMode] = useState(true);\r\n\r\n  const handleModeSwitch = () => {\r\n    setNightMode(!nightMode);\r\n  };\r\n\r\n  return (\r\n    <div className={`App App${nightMode ? \"-night\" : \"-day\"}`}>\r\n      <header className=\"App-header\">\r\n        <ThemeProvider theme={theme}>\r\n          <Homepage switchMode={handleModeSwitch} nightMode={nightMode} />\r\n        </ThemeProvider>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}